// Code generated by counterfeiter. DO NOT EDIT.
package runcontainerdfakes

import (
	"sync"
	"syscall"

	"github.com/concourse/guardian/rundmc/runcontainerd"
	"code.cloudfoundry.org/lager"
)

type FakeProcessManager struct {
	WaitStub        func(log lager.Logger, containerID, processID string) (int, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
		log         lager.Logger
		containerID string
		processID   string
	}
	waitReturns struct {
		result1 int
		result2 error
	}
	waitReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	SignalStub        func(log lager.Logger, containerID, processID string, signal syscall.Signal) error
	signalMutex       sync.RWMutex
	signalArgsForCall []struct {
		log         lager.Logger
		containerID string
		processID   string
		signal      syscall.Signal
	}
	signalReturns struct {
		result1 error
	}
	signalReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteProcessStub        func(log lager.Logger, containerID, processID string) error
	deleteProcessMutex       sync.RWMutex
	deleteProcessArgsForCall []struct {
		log         lager.Logger
		containerID string
		processID   string
	}
	deleteProcessReturns struct {
		result1 error
	}
	deleteProcessReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessManager) Wait(log lager.Logger, containerID string, processID string) (int, error) {
	fake.waitMutex.Lock()
	ret, specificReturn := fake.waitReturnsOnCall[len(fake.waitArgsForCall)]
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
		log         lager.Logger
		containerID string
		processID   string
	}{log, containerID, processID})
	fake.recordInvocation("Wait", []interface{}{log, containerID, processID})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub(log, containerID, processID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.waitReturns.result1, fake.waitReturns.result2
}

func (fake *FakeProcessManager) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeProcessManager) WaitArgsForCall(i int) (lager.Logger, string, string) {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return fake.waitArgsForCall[i].log, fake.waitArgsForCall[i].containerID, fake.waitArgsForCall[i].processID
}

func (fake *FakeProcessManager) WaitReturns(result1 int, result2 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessManager) WaitReturnsOnCall(i int, result1 int, result2 error) {
	fake.WaitStub = nil
	if fake.waitReturnsOnCall == nil {
		fake.waitReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.waitReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessManager) Signal(log lager.Logger, containerID string, processID string, signal syscall.Signal) error {
	fake.signalMutex.Lock()
	ret, specificReturn := fake.signalReturnsOnCall[len(fake.signalArgsForCall)]
	fake.signalArgsForCall = append(fake.signalArgsForCall, struct {
		log         lager.Logger
		containerID string
		processID   string
		signal      syscall.Signal
	}{log, containerID, processID, signal})
	fake.recordInvocation("Signal", []interface{}{log, containerID, processID, signal})
	fake.signalMutex.Unlock()
	if fake.SignalStub != nil {
		return fake.SignalStub(log, containerID, processID, signal)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.signalReturns.result1
}

func (fake *FakeProcessManager) SignalCallCount() int {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return len(fake.signalArgsForCall)
}

func (fake *FakeProcessManager) SignalArgsForCall(i int) (lager.Logger, string, string, syscall.Signal) {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return fake.signalArgsForCall[i].log, fake.signalArgsForCall[i].containerID, fake.signalArgsForCall[i].processID, fake.signalArgsForCall[i].signal
}

func (fake *FakeProcessManager) SignalReturns(result1 error) {
	fake.SignalStub = nil
	fake.signalReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessManager) SignalReturnsOnCall(i int, result1 error) {
	fake.SignalStub = nil
	if fake.signalReturnsOnCall == nil {
		fake.signalReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.signalReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessManager) DeleteProcess(log lager.Logger, containerID string, processID string) error {
	fake.deleteProcessMutex.Lock()
	ret, specificReturn := fake.deleteProcessReturnsOnCall[len(fake.deleteProcessArgsForCall)]
	fake.deleteProcessArgsForCall = append(fake.deleteProcessArgsForCall, struct {
		log         lager.Logger
		containerID string
		processID   string
	}{log, containerID, processID})
	fake.recordInvocation("DeleteProcess", []interface{}{log, containerID, processID})
	fake.deleteProcessMutex.Unlock()
	if fake.DeleteProcessStub != nil {
		return fake.DeleteProcessStub(log, containerID, processID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteProcessReturns.result1
}

func (fake *FakeProcessManager) DeleteProcessCallCount() int {
	fake.deleteProcessMutex.RLock()
	defer fake.deleteProcessMutex.RUnlock()
	return len(fake.deleteProcessArgsForCall)
}

func (fake *FakeProcessManager) DeleteProcessArgsForCall(i int) (lager.Logger, string, string) {
	fake.deleteProcessMutex.RLock()
	defer fake.deleteProcessMutex.RUnlock()
	return fake.deleteProcessArgsForCall[i].log, fake.deleteProcessArgsForCall[i].containerID, fake.deleteProcessArgsForCall[i].processID
}

func (fake *FakeProcessManager) DeleteProcessReturns(result1 error) {
	fake.DeleteProcessStub = nil
	fake.deleteProcessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessManager) DeleteProcessReturnsOnCall(i int, result1 error) {
	fake.DeleteProcessStub = nil
	if fake.deleteProcessReturnsOnCall == nil {
		fake.deleteProcessReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteProcessReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	fake.deleteProcessMutex.RLock()
	defer fake.deleteProcessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runcontainerd.ProcessManager = new(FakeProcessManager)
