// Code generated by counterfeiter. DO NOT EDIT.
package processesfakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"github.com/concourse/guardian/rundmc/goci"
	"github.com/concourse/guardian/rundmc/processes"
)

type FakeEnvDeterminer struct {
	EnvForStub        func(bndl goci.Bndl, spec garden.ProcessSpec, containerUID int) []string
	envForMutex       sync.RWMutex
	envForArgsForCall []struct {
		bndl         goci.Bndl
		spec         garden.ProcessSpec
		containerUID int
	}
	envForReturns struct {
		result1 []string
	}
	envForReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnvDeterminer) EnvFor(bndl goci.Bndl, spec garden.ProcessSpec, containerUID int) []string {
	fake.envForMutex.Lock()
	ret, specificReturn := fake.envForReturnsOnCall[len(fake.envForArgsForCall)]
	fake.envForArgsForCall = append(fake.envForArgsForCall, struct {
		bndl         goci.Bndl
		spec         garden.ProcessSpec
		containerUID int
	}{bndl, spec, containerUID})
	fake.recordInvocation("EnvFor", []interface{}{bndl, spec, containerUID})
	fake.envForMutex.Unlock()
	if fake.EnvForStub != nil {
		return fake.EnvForStub(bndl, spec, containerUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.envForReturns.result1
}

func (fake *FakeEnvDeterminer) EnvForCallCount() int {
	fake.envForMutex.RLock()
	defer fake.envForMutex.RUnlock()
	return len(fake.envForArgsForCall)
}

func (fake *FakeEnvDeterminer) EnvForArgsForCall(i int) (goci.Bndl, garden.ProcessSpec, int) {
	fake.envForMutex.RLock()
	defer fake.envForMutex.RUnlock()
	return fake.envForArgsForCall[i].bndl, fake.envForArgsForCall[i].spec, fake.envForArgsForCall[i].containerUID
}

func (fake *FakeEnvDeterminer) EnvForReturns(result1 []string) {
	fake.EnvForStub = nil
	fake.envForReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeEnvDeterminer) EnvForReturnsOnCall(i int, result1 []string) {
	fake.EnvForStub = nil
	if fake.envForReturnsOnCall == nil {
		fake.envForReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.envForReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeEnvDeterminer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.envForMutex.RLock()
	defer fake.envForMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnvDeterminer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ processes.EnvDeterminer = new(FakeEnvDeterminer)
